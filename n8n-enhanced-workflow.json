{
  "name": "Enhanced Audio Capture to Notion",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "meeting-audio",
        "responseMode": "onReceived",
        "responseData": "success",
        "options": {}
      },
      "id": "webhook-audio-receiver",
      "name": "Webhook - Audio Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Session Aggregator - Collects audio chunks by session\nconst data = $input.first().json;\nconst sessionId = data.recordingSessionId;\n\n// Get or initialize static data for session storage\nconst staticData = $getWorkflowStaticData('global');\nif (!staticData.sessions) {\n  staticData.sessions = {};\n}\n\n// Initialize session if first chunk\nif (data.isFirstChunk) {\n  staticData.sessions[sessionId] = {\n    sessionId: sessionId,\n    meetingId: data.meetingId,\n    meetingUrl: data.meetingUrl,\n    title: data.title,\n    source: data.source,\n    recordingType: data.recordingType,\n    startTime: data.timestamp,\n    chunks: [],\n    isComplete: false\n  };\n  console.log(`[SESSION] Started: ${sessionId}`);\n}\n\n// Add chunk to session\nif (staticData.sessions[sessionId]) {\n  staticData.sessions[sessionId].chunks.push({\n    chunkIndex: data.chunkIndex,\n    audio: data.audio,\n    timestamp: data.timestamp,\n    duration: data.duration\n  });\n  \n  console.log(`[SESSION] Added chunk ${data.chunkIndex} to ${sessionId}`);\n  \n  // Check if session is complete\n  if (data.isLastChunk) {\n    staticData.sessions[sessionId].isComplete = true;\n    staticData.sessions[sessionId].endTime = data.timestamp;\n    \n    // Calculate total duration\n    const totalDuration = staticData.sessions[sessionId].chunks.reduce(\n      (sum, chunk) => sum + chunk.duration, 0\n    );\n    staticData.sessions[sessionId].totalDuration = totalDuration;\n    \n    console.log(`[SESSION] Completed: ${sessionId} - ${totalDuration}s`);\n    \n    // Return complete session for processing\n    const completeSession = { ...staticData.sessions[sessionId] };\n    \n    // Clean up completed session\n    delete staticData.sessions[sessionId];\n    \n    return { ...completeSession };\n  }\n}\n\n// Return null if session not complete (stops workflow)\nreturn null;"
      },
      "id": "session-aggregator",
      "name": "Session Aggregator",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.isComplete}}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-complete",
      "name": "Session Complete?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.openAiApi.apiKey}}"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "inputDataFieldName": "audio",
              "parameterType": "formBinaryData"
            },
            {
              "name": "model",
              "value": "whisper-1"
            },
            {
              "name": "language",
              "value": "en"
            },
            {
              "name": "response_format",
              "value": "json"
            },
            {
              "name": "temperature",
              "value": "0"
            }
          ]
        }
      },
      "id": "openai-transcribe",
      "name": "OpenAI Transcribe",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 200]
    },
    {
      "parameters": {
        "functionCode": "// Prepare audio data for OpenAI transcription\nconst session = $input.first().json;\nconst results = [];\n\n// Sort chunks by index\nconst sortedChunks = session.chunks.sort((a, b) => a.chunkIndex - b.chunkIndex);\n\n// Process each chunk for transcription\nfor (let i = 0; i < sortedChunks.length; i++) {\n  const chunk = sortedChunks[i];\n  \n  // Convert base64 audio to binary data\n  const audioBuffer = Buffer.from(chunk.audio, 'base64');\n  \n  results.push({\n    json: {\n      sessionId: session.sessionId,\n      chunkIndex: chunk.chunkIndex,\n      sessionMetadata: {\n        meetingId: session.meetingId,\n        title: session.title,\n        source: session.source,\n        recordingType: session.recordingType,\n        totalDuration: session.totalDuration,\n        totalChunks: sortedChunks.length\n      }\n    },\n    binary: {\n      audio: {\n        data: audioBuffer,\n        mimeType: 'audio/webm',\n        fileName: `chunk_${chunk.chunkIndex}.webm`\n      }\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "prepare-audio",
      "name": "Prepare Audio for Transcription",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "functionCode": "// Reassemble transcriptions by session\nconst items = $input.all();\nconst sessionId = items[0].json.sessionId;\nconst metadata = items[0].json.sessionMetadata;\n\n// Collect all transcriptions\nconst transcriptions = items.map(item => ({\n  chunkIndex: item.json.chunkIndex || 0,\n  text: item.json.text || ''\n}));\n\n// Sort by chunk index and combine\ntranscriptions.sort((a, b) => a.chunkIndex - b.chunkIndex);\nconst fullTranscription = transcriptions.map(t => t.text).join(' ').trim();\n\nconsole.log(`[TRANSCRIPTION] Assembled ${transcriptions.length} chunks for session ${sessionId}`);\n\nreturn {\n  sessionId: sessionId,\n  fullTranscription: fullTranscription,\n  metadata: metadata,\n  transcriptionChunks: transcriptions.length\n};"
      },
      "id": "reassemble-transcriptions",
      "name": "Reassemble Transcriptions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.openAiApi.apiKey}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "{\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an expert meeting analyst. Analyze the transcription and extract structured information.\\n\\nFor {{$json.metadata.recordingType}} recordings from {{$json.metadata.source}}, extract:\\n\\n1. **Executive Summary** (2-3 sentences)\\n2. **Main Topics** (key discussion points)\\n3. **Key Decisions** (important conclusions)\\n4. **Action Items** (tasks with owners and deadlines if mentioned)\\n5. **Participants** (speakers identified in transcription)\\n6. **Questions** (items needing follow-up)\\n7. **Next Steps** (planned actions)\\n8. **Meeting Type** (standup, planning, review, etc.)\\n9. **Priority Level** (high, medium, low)\\n10. **Tags** (relevant keywords)\\n\\nReturn ONLY a valid JSON object in this exact format:\\n{\\n  \\\"executiveSummary\\\": \\\"Brief summary here\\\",\\n  \\\"mainTopics\\\": [\\\"topic1\\\", \\\"topic2\\\"],\\n  \\\"keyDecisions\\\": [\\\"decision1\\\", \\\"decision2\\\"],\\n  \\\"actionItems\\\": [{\\\"task\\\": \\\"description\\\", \\\"owner\\\": \\\"person\\\", \\\"deadline\\\": \\\"date or null\\\"}],\\n  \\\"participants\\\": [\\\"person1\\\", \\\"person2\\\"],\\n  \\\"questions\\\": [\\\"question1\\\", \\\"question2\\\"],\\n  \\\"nextSteps\\\": [\\\"step1\\\", \\\"step2\\\"],\\n  \\\"meetingType\\\": \\\"type\\\",\\n  \\\"priorityLevel\\\": \\\"medium\\\",\\n  \\\"followUpRequired\\\": true,\\n  \\\"tags\\\": [\\\"tag1\\\", \\\"tag2\\\"]\\n}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Analyze this {{$json.metadata.recordingType}} transcription from {{$json.metadata.source}}:\\n\\nTitle: {{$json.metadata.title}}\\nDuration: {{$json.metadata.totalDuration}} seconds\\n\\nTranscription:\\n{{$json.fullTranscription}}\"\n    }\n  ],\n  \"temperature\": 0.2,\n  \"max_tokens\": 1500\n}"
      },
      "id": "ai-analyzer",
      "name": "AI Content Analyzer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "functionCode": "// Parse AI analysis and prepare for Notion\nconst transcriptionData = $node[\"Reassemble Transcriptions\"].json;\nconst aiResponse = $input.first().json;\n\nlet analysis;\ntry {\n  // Clean the response and parse JSON\n  const cleanResponse = aiResponse.replace(/```json\\s*|\\s*```/g, '').trim();\n  analysis = JSON.parse(cleanResponse);\n} catch (error) {\n  console.error('Error parsing AI analysis:', error);\n  // Fallback structure\n  analysis = {\n    executiveSummary: \"Analysis parsing failed - raw transcription available\",\n    mainTopics: [],\n    keyDecisions: [],\n    actionItems: [],\n    participants: [],\n    questions: [],\n    nextSteps: [],\n    meetingType: \"unknown\",\n    priorityLevel: \"medium\",\n    followUpRequired: false,\n    tags: []\n  };\n}\n\nconst metadata = transcriptionData.metadata;\n\n// Prepare comprehensive Notion data\nconst notionData = {\n  // Page Properties\n  title: metadata.title || `${metadata.source} Recording`,\n  recordingDate: new Date().toISOString().split('T')[0],\n  platform: metadata.source,\n  recordingType: metadata.recordingType,\n  duration: `${Math.round(metadata.totalDuration / 60)} minutes`,\n  sessionId: transcriptionData.sessionId,\n  \n  // Analysis Results\n  executiveSummary: analysis.executiveSummary,\n  mainTopics: analysis.mainTopics,\n  keyDecisions: analysis.keyDecisions,\n  actionItems: analysis.actionItems,\n  participants: analysis.participants,\n  questions: analysis.questions,\n  nextSteps: analysis.nextSteps,\n  \n  // Classification\n  meetingType: analysis.meetingType,\n  priorityLevel: analysis.priorityLevel,\n  followUpRequired: analysis.followUpRequired,\n  tags: [...analysis.tags, metadata.source, metadata.recordingType].filter((tag, index, self) => self.indexOf(tag) === index),\n  \n  // Full Content\n  fullTranscription: transcriptionData.fullTranscription,\n  \n  // Metadata\n  originalUrl: metadata.meetingUrl || '',\n  createdAt: new Date().toISOString()\n};\n\nconsole.log(`[NOTION] Prepared data for: ${notionData.title}`);\n\nreturn notionData;"
      },
      "id": "prepare-notion",
      "name": "Prepare Notion Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "create",
        "databaseId": "YOUR_NOTION_DATABASE_ID",
        "title": "={{$json.title}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Date",
              "date": "={{$json.recordingDate}}"
            },
            {
              "key": "Platform", 
              "select": "={{$json.platform}}"
            },
            {
              "key": "Type",
              "select": "={{$json.recordingType}}"
            },
            {
              "key": "Duration",
              "richText": "={{$json.duration}}"
            },
            {
              "key": "Priority",
              "select": "={{$json.priorityLevel}}"
            },
            {
              "key": "Follow-up Required",
              "checkbox": "={{$json.followUpRequired}}"
            },
            {
              "key": "Tags",
              "multiSelect": "={{$json.tags}}"
            },
            {
              "key": "Participants",
              "richText": "={{$json.participants.join(', ')}}"
            },
            {
              "key": "Session ID",
              "richText": "={{$json.sessionId}}"
            }
          ]
        },
        "pageContent": [
          {
            "type": "heading_1",
            "heading_1": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "📋 Executive Summary"
                  }
                }
              ]
            }
          },
          {
            "type": "paragraph",
            "paragraph": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "={{$json.executiveSummary}}"
                  }
                }
              ]
            }
          },
          {
            "type": "heading_2",
            "heading_2": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "🎯 Main Topics"
                  }
                }
              ]
            }
          },
          {
            "type": "bulleted_list_item",
            "bulleted_list_item": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "={{$json.mainTopics.join('\\n• ')}}"
                  }
                }
              ]
            }
          },
          {
            "type": "heading_2",
            "heading_2": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "✅ Key Decisions"
                  }
                }
              ]
            }
          },
          {
            "type": "bulleted_list_item",
            "bulleted_list_item": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "={{$json.keyDecisions.join('\\n• ')}}"
                  }
                }
              ]
            }
          },
          {
            "type": "heading_2",
            "heading_2": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "📝 Action Items"
                  }
                }
              ]
            }
          },
          {
            "type": "to_do",
            "to_do": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "={{$json.actionItems.map(item => `${item.task} (${item.owner})${item.deadline ? ' - Due: ' + item.deadline : ''}`).join('\\n☐ ')}}"
                  }
                }
              ],
              "checked": false
            }
          },
          {
            "type": "heading_2",
            "heading_2": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "❓ Questions & Follow-ups"
                  }
                }
              ]
            }
          },
          {
            "type": "bulleted_list_item",
            "bulleted_list_item": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "={{$json.questions.join('\\n• ')}}"
                  }
                }
              ]
            }
          },
          {
            "type": "heading_2",
            "heading_2": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "⏭️ Next Steps"
                  }
                }
              ]
            }
          },
          {
            "type": "numbered_list_item",
            "numbered_list_item": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "={{$json.nextSteps.join('\\n1. ')}}"
                  }
                }
              ]
            }
          },
          {
            "type": "divider",
            "divider": {}
          },
          {
            "type": "toggle",
            "toggle": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "📄 Full Transcription"
                  }
                }
              ],
              "children": [
                {
                  "type": "paragraph",
                  "paragraph": {
                    "text": [
                      {
                        "type": "text",
                        "text": {
                          "content": "={{$json.fullTranscription}}"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "type": "callout",
            "callout": {
              "text": [
                {
                  "type": "text",
                  "text": {
                    "content": "🔗 Original Source: ={{$json.originalUrl}}\\n🆔 Session ID: ={{$json.sessionId}}\\n📅 Created: ={{$json.createdAt}}"
                  }
                }
              ],
              "icon": {
                "emoji": "ℹ️"
              }
            }
          }
        ]
      },
      "id": "create-notion-page",
      "name": "Create Notion Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [1780, 200]
    }
  ],
  "connections": {
    "Webhook - Audio Receiver": {
      "main": [
        [
          {
            "node": "Session Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session Aggregator": {
      "main": [
        [
          {
            "node": "Session Complete?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session Complete?": {
      "main": [
        [
          {
            "node": "Prepare Audio for Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Audio for Transcription": {
      "main": [
        [
          {
            "node": "OpenAI Transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Transcribe": {
      "main": [
        [
          {
            "node": "Reassemble Transcriptions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reassemble Transcriptions": {
      "main": [
        [
          {
            "node": "AI Content Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content Analyzer": {
      "main": [
        [
          {
            "node": "Prepare Notion Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Notion Data": {
      "main": [
        [
          {
            "node": "Create Notion Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "none",
    "saveManualExecutions": false,
    "timezone": "UTC"
  },
  "staticData": null,
  "meta": {
    "instanceId": "enhanced-audio-processor"
  },
  "tags": []
}